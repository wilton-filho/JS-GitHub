window.addEventListener("DOMContentLoaded", function () {
    document.getElementById("btn").addEventListener("click", function () {
        var p = document.createElement("p");
        // Op√ß√£o 1:
        p.textContent = document.getElementById('txtNome').value

        // Op√ß√£o 2: pode-se usar tags no texto
        p.innerHTML = `<h2> ${document.getElementById('txtNome').value} </h2>`;

        // Op√ß√£o 3:
        var texto = document.createTextNode(document.getElementById('txtNome').value);
        p.appendChild(texto); 
        
        document.getElementById('box').appendChild(p);
    })
})

// Qual usar?
// Op√ß√£o 1: p.textContent = document.getElementById('txtNome').value
// üîπ Mais segura e perform√°tica, pois trata tudo como texto, impedindo a execu√ß√£o de c√≥digos HTML maliciosos.
// Vantagens:
// Protege contra inje√ß√£o de c√≥digo malicioso (XSS), pois trata tudo como texto.
// Mais r√°pido, pois evita parsing de HTML.
// Desvantagem:
// Se precisar renderizar HTML (exemplo: <b>Texto em negrito</b>), ele ser√° exibido como texto puro.
// ----------------------
// Op√ß√£o 2: p.innerHTML = <h2> ${document.getElementById('txtNome').value} </h2>;
// Boa se voc√™ precisa que tags HTML sejam interpretadas.
// antagens:
// Permite formata√ß√£o HTML (exemplo: <b>Texto em negrito</b> ser√° interpretado corretamente).
// Desvantagem:
// Risco de seguran√ßa: Se value vier de uma entrada do usu√°rio, pode permitir XSS (Cross-Site Scripting), injetando <script> malicioso.
// Mais lento que textContent, pois o navegador precisa processar o HTML.
// üí° Solu√ß√£o para maior seguran√ßa: Se quiser evitar XSS ao usar innerHTML, sanitizar o valor antes de inserir no DOM √© uma boa pr√°tica.
// --------------------------------------------------------
// Op√ß√£o 3: createTextNode()
// üîπ Funciona de forma semelhante a textContent, mas √© mais verboso.
// Vantagens:
// Mesmo n√≠vel de seguran√ßa que textContent.
// Desvantagem:
// Mais verboso, sem oferecer benef√≠cios em rela√ß√£o ao textContent.
// ---------------------------------------
// Conclus√£o:
// 1Ô∏è‚É£ Se quiser seguran√ßa e desempenho: ‚úÖ Use textContent (Op√ß√£o 1).
// 2Ô∏è‚É£ Se precisar renderizar HTML: ‚úÖ Use innerHTML (Op√ß√£o 2), mas com cuidado contra XSS.
// 3Ô∏è‚É£ Se quiser seguran√ßa, mas usando um m√©todo alternativo: createTextNode() (Op√ß√£o 3), mas textContent j√° √© suficiente.

// üöÄ Recomenda√ß√£o final: Use textContent sempre que poss√≠vel!