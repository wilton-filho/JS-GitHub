// Op√ß√£o 1:
window.addEventListener("DOMContentLoaded", function () {
    document.getElementById("btn").addEventListener("click", function () {
        var img = document.createElement("img");
        img.setAttribute("src", "img/stick.png");
        img.setAttribute("title", "imagem de teste");
        document.getElementById('box').appendChild(img);
    })
})

// Op√ß√£o 2:
window.addEventListener("DOMContentLoaded", function () {
    document.getElementById("btn").addEventListener("click", function () {
        var img = document.createElement("img");
        img.src = "img/stick.png";
        img.title = "imagem de teste";
        document.getElementById('box').appendChild(img);
    })
})

// Op√ß√£o 3:
window.addEventListener("DOMContentLoaded", function () {
    document.getElementById("btn").addEventListener("click", function () {
        var img = new Image();
        img.src = "img/stick.png";
        img.title = "imagem de teste";
        document.getElementById('box').appendChild(img);
    })
})


// Observa√ß√µes:
// Compara√ß√£o das op√ß√µes
// Op√ß√£o 1:

// Usa document.createElement("img") e setAttribute(), o que resulta em chamadas de fun√ß√£o adicionais desnecess√°rias.
// O setAttribute("src", "...") e setAttribute("title", "...") s√£o menos perform√°ticos do que a atribui√ß√£o direta de propriedades.
// Op√ß√£o 2:

// Mant√©m document.createElement("img"), mas usa img.src e img.title, eliminando chamadas de setAttribute(), tornando-a mais eficiente do que a Op√ß√£o 1.
// J√° √© uma boa otimiza√ß√£o.
// Op√ß√£o 3 (Mais otimizada):

// Usa new Image(), que √© mais espec√≠fico para a cria√ß√£o de imagens, sendo levemente mais eficiente do que document.createElement("img") em termos de performance e clareza.
// Atribui src e title diretamente, eliminando chamadas desnecess√°rias.

// Conclus√£o
// üîπ A Op√ß√£o 3 √© a mais otimizada porque utiliza new Image() (m√©todo nativo para cria√ß√£o de imagens) e atribui√ß√£o direta de propriedades, tornando o c√≥digo mais enxuto e perform√°tico. üöÄ